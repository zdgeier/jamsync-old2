// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: jamsyncpb.proto

package jamsyncpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JamsyncAPIClient is the client API for JamsyncAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JamsyncAPIClient interface {
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	GetFileList(ctx context.Context, in *GetFileListRequest, opts ...grpc.CallOption) (*GetFileListResponse, error)
	AddProject(ctx context.Context, in *AddProjectRequest, opts ...grpc.CallOption) (*AddProjectResponse, error)
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
}

type jamsyncAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewJamsyncAPIClient(cc grpc.ClientConnInterface) JamsyncAPIClient {
	return &jamsyncAPIClient{cc}
}

func (c *jamsyncAPIClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, "/jamsyncpb.JamsyncAPI/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jamsyncAPIClient) GetFileList(ctx context.Context, in *GetFileListRequest, opts ...grpc.CallOption) (*GetFileListResponse, error) {
	out := new(GetFileListResponse)
	err := c.cc.Invoke(ctx, "/jamsyncpb.JamsyncAPI/GetFileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jamsyncAPIClient) AddProject(ctx context.Context, in *AddProjectRequest, opts ...grpc.CallOption) (*AddProjectResponse, error) {
	out := new(AddProjectResponse)
	err := c.cc.Invoke(ctx, "/jamsyncpb.JamsyncAPI/AddProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jamsyncAPIClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/jamsyncpb.JamsyncAPI/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JamsyncAPIServer is the server API for JamsyncAPI service.
// All implementations must embed UnimplementedJamsyncAPIServer
// for forward compatibility
type JamsyncAPIServer interface {
	GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	GetFileList(context.Context, *GetFileListRequest) (*GetFileListResponse, error)
	AddProject(context.Context, *AddProjectRequest) (*AddProjectResponse, error)
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	mustEmbedUnimplementedJamsyncAPIServer()
}

// UnimplementedJamsyncAPIServer must be embedded to have forward compatible implementations.
type UnimplementedJamsyncAPIServer struct {
}

func (UnimplementedJamsyncAPIServer) GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedJamsyncAPIServer) GetFileList(context.Context, *GetFileListRequest) (*GetFileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileList not implemented")
}
func (UnimplementedJamsyncAPIServer) AddProject(context.Context, *AddProjectRequest) (*AddProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProject not implemented")
}
func (UnimplementedJamsyncAPIServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedJamsyncAPIServer) mustEmbedUnimplementedJamsyncAPIServer() {}

// UnsafeJamsyncAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JamsyncAPIServer will
// result in compilation errors.
type UnsafeJamsyncAPIServer interface {
	mustEmbedUnimplementedJamsyncAPIServer()
}

func RegisterJamsyncAPIServer(s grpc.ServiceRegistrar, srv JamsyncAPIServer) {
	s.RegisterService(&JamsyncAPI_ServiceDesc, srv)
}

func _JamsyncAPI_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JamsyncAPIServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jamsyncpb.JamsyncAPI/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JamsyncAPIServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JamsyncAPI_GetFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JamsyncAPIServer).GetFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jamsyncpb.JamsyncAPI/GetFileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JamsyncAPIServer).GetFileList(ctx, req.(*GetFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JamsyncAPI_AddProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JamsyncAPIServer).AddProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jamsyncpb.JamsyncAPI/AddProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JamsyncAPIServer).AddProject(ctx, req.(*AddProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JamsyncAPI_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JamsyncAPIServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jamsyncpb.JamsyncAPI/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JamsyncAPIServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JamsyncAPI_ServiceDesc is the grpc.ServiceDesc for JamsyncAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JamsyncAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jamsyncpb.JamsyncAPI",
	HandlerType: (*JamsyncAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFile",
			Handler:    _JamsyncAPI_GetFile_Handler,
		},
		{
			MethodName: "GetFileList",
			Handler:    _JamsyncAPI_GetFileList_Handler,
		},
		{
			MethodName: "AddProject",
			Handler:    _JamsyncAPI_AddProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _JamsyncAPI_ListProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jamsyncpb.proto",
}
