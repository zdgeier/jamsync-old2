// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: jamsyncstore.proto

package jamsyncpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JamsyncStoreClient is the client API for JamsyncStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JamsyncStoreClient interface {
	ReadChangeData(ctx context.Context, opts ...grpc.CallOption) (JamsyncStore_ReadChangeDataClient, error)
	CreateChangeDir(ctx context.Context, in *CreateChangeDirRequest, opts ...grpc.CallOption) (*CreateChangeDirResponse, error)
	StreamChange(ctx context.Context, opts ...grpc.CallOption) (JamsyncStore_StreamChangeClient, error)
	CommitChange(ctx context.Context, in *CommitChangeRequest, opts ...grpc.CallOption) (*CommitChangeResponse, error)
}

type jamsyncStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewJamsyncStoreClient(cc grpc.ClientConnInterface) JamsyncStoreClient {
	return &jamsyncStoreClient{cc}
}

func (c *jamsyncStoreClient) ReadChangeData(ctx context.Context, opts ...grpc.CallOption) (JamsyncStore_ReadChangeDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &JamsyncStore_ServiceDesc.Streams[0], "/jamsyncpb.JamsyncStore/ReadChangeData", opts...)
	if err != nil {
		return nil, err
	}
	x := &jamsyncStoreReadChangeDataClient{stream}
	return x, nil
}

type JamsyncStore_ReadChangeDataClient interface {
	Send(*ChangeLocationList) error
	Recv() (*Operation, error)
	grpc.ClientStream
}

type jamsyncStoreReadChangeDataClient struct {
	grpc.ClientStream
}

func (x *jamsyncStoreReadChangeDataClient) Send(m *ChangeLocationList) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jamsyncStoreReadChangeDataClient) Recv() (*Operation, error) {
	m := new(Operation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jamsyncStoreClient) CreateChangeDir(ctx context.Context, in *CreateChangeDirRequest, opts ...grpc.CallOption) (*CreateChangeDirResponse, error) {
	out := new(CreateChangeDirResponse)
	err := c.cc.Invoke(ctx, "/jamsyncpb.JamsyncStore/CreateChangeDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jamsyncStoreClient) StreamChange(ctx context.Context, opts ...grpc.CallOption) (JamsyncStore_StreamChangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &JamsyncStore_ServiceDesc.Streams[1], "/jamsyncpb.JamsyncStore/StreamChange", opts...)
	if err != nil {
		return nil, err
	}
	x := &jamsyncStoreStreamChangeClient{stream}
	return x, nil
}

type JamsyncStore_StreamChangeClient interface {
	Send(*ChangeOperation) error
	Recv() (*ChangeLocationList, error)
	grpc.ClientStream
}

type jamsyncStoreStreamChangeClient struct {
	grpc.ClientStream
}

func (x *jamsyncStoreStreamChangeClient) Send(m *ChangeOperation) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jamsyncStoreStreamChangeClient) Recv() (*ChangeLocationList, error) {
	m := new(ChangeLocationList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jamsyncStoreClient) CommitChange(ctx context.Context, in *CommitChangeRequest, opts ...grpc.CallOption) (*CommitChangeResponse, error) {
	out := new(CommitChangeResponse)
	err := c.cc.Invoke(ctx, "/jamsyncpb.JamsyncStore/CommitChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JamsyncStoreServer is the server API for JamsyncStore service.
// All implementations must embed UnimplementedJamsyncStoreServer
// for forward compatibility
type JamsyncStoreServer interface {
	ReadChangeData(JamsyncStore_ReadChangeDataServer) error
	CreateChangeDir(context.Context, *CreateChangeDirRequest) (*CreateChangeDirResponse, error)
	StreamChange(JamsyncStore_StreamChangeServer) error
	CommitChange(context.Context, *CommitChangeRequest) (*CommitChangeResponse, error)
	mustEmbedUnimplementedJamsyncStoreServer()
}

// UnimplementedJamsyncStoreServer must be embedded to have forward compatible implementations.
type UnimplementedJamsyncStoreServer struct {
}

func (UnimplementedJamsyncStoreServer) ReadChangeData(JamsyncStore_ReadChangeDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadChangeData not implemented")
}
func (UnimplementedJamsyncStoreServer) CreateChangeDir(context.Context, *CreateChangeDirRequest) (*CreateChangeDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChangeDir not implemented")
}
func (UnimplementedJamsyncStoreServer) StreamChange(JamsyncStore_StreamChangeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChange not implemented")
}
func (UnimplementedJamsyncStoreServer) CommitChange(context.Context, *CommitChangeRequest) (*CommitChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitChange not implemented")
}
func (UnimplementedJamsyncStoreServer) mustEmbedUnimplementedJamsyncStoreServer() {}

// UnsafeJamsyncStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JamsyncStoreServer will
// result in compilation errors.
type UnsafeJamsyncStoreServer interface {
	mustEmbedUnimplementedJamsyncStoreServer()
}

func RegisterJamsyncStoreServer(s grpc.ServiceRegistrar, srv JamsyncStoreServer) {
	s.RegisterService(&JamsyncStore_ServiceDesc, srv)
}

func _JamsyncStore_ReadChangeData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JamsyncStoreServer).ReadChangeData(&jamsyncStoreReadChangeDataServer{stream})
}

type JamsyncStore_ReadChangeDataServer interface {
	Send(*Operation) error
	Recv() (*ChangeLocationList, error)
	grpc.ServerStream
}

type jamsyncStoreReadChangeDataServer struct {
	grpc.ServerStream
}

func (x *jamsyncStoreReadChangeDataServer) Send(m *Operation) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jamsyncStoreReadChangeDataServer) Recv() (*ChangeLocationList, error) {
	m := new(ChangeLocationList)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _JamsyncStore_CreateChangeDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChangeDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JamsyncStoreServer).CreateChangeDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jamsyncpb.JamsyncStore/CreateChangeDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JamsyncStoreServer).CreateChangeDir(ctx, req.(*CreateChangeDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JamsyncStore_StreamChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JamsyncStoreServer).StreamChange(&jamsyncStoreStreamChangeServer{stream})
}

type JamsyncStore_StreamChangeServer interface {
	Send(*ChangeLocationList) error
	Recv() (*ChangeOperation, error)
	grpc.ServerStream
}

type jamsyncStoreStreamChangeServer struct {
	grpc.ServerStream
}

func (x *jamsyncStoreStreamChangeServer) Send(m *ChangeLocationList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jamsyncStoreStreamChangeServer) Recv() (*ChangeOperation, error) {
	m := new(ChangeOperation)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _JamsyncStore_CommitChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JamsyncStoreServer).CommitChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jamsyncpb.JamsyncStore/CommitChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JamsyncStoreServer).CommitChange(ctx, req.(*CommitChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JamsyncStore_ServiceDesc is the grpc.ServiceDesc for JamsyncStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JamsyncStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jamsyncpb.JamsyncStore",
	HandlerType: (*JamsyncStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChangeDir",
			Handler:    _JamsyncStore_CreateChangeDir_Handler,
		},
		{
			MethodName: "CommitChange",
			Handler:    _JamsyncStore_CommitChange_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadChangeData",
			Handler:       _JamsyncStore_ReadChangeData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamChange",
			Handler:       _JamsyncStore_StreamChange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "jamsyncstore.proto",
}
